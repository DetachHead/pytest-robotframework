[tool.poetry]
authors = ["DetachHead <detachhead@users.noreply.github.com>"]
description = "a pytest plugin that can run both python and robotframework tests while generating robot reports for them"
name = "pytest_robotframework"
version = "1.5.0"
readme = "README.md"
repository = "https://github.com/detachhead/pytest-robotframework"

[tool.poetry.dependencies]
python = "^3.11"
pytest = "^7"
robotframework = "^6.1.1"
deepmerge = "^1.1.0"

[tool.poetry.group.dev.dependencies]
black = ">=23"
basedmypy = ">=2.1"
lxml = ">=4.9.3"
lxml-stubs = ">=0.4.0"
pylint = ">=2.15"
ruff = ">=0.0.286"
robotframework-robocop = ">=4.1.0"
robotframework-tidy = ">=4.5.0"

[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core>=1.1.0b2"]

[tool.poetry.plugins.pytest11]
robotframework = "pytest_robotframework.pytest_robotframework"

[tool.black]
target-version = ["py311"]
skip-magic-trailing-comma = true
preview = true

[tool.pylint.MASTER]
ignore-patterns = '.*\.pyi'
fail-on = "I"
bad-names = ["foo", "bar", "baz", "retval"]
load-plugins = [
    # we don't use all of these but enabling them all for completeness since there's no error if a rule is not found
    "pylint.extensions.bad_builtin",
    "pylint.extensions.broad_try_caluse",
    "pylint.extensions.check_elif",
    "pylint.extensions.code_style",
    "pylint.extensions.comparetozero",
    "pylint.extensions.comparison_placement",
    "pylint.extensions.confusing_elif",
    "pylint.extensions.consider_refactoring_into_while_condition",
    "pylint.extensions.consider_ternary_expression",
    "pylint.extensions.dict_init_mutate",
    "pylint.extensions.docparams",
    "pylint.extensions.docstyle",
    "pylint.extensions.dunder",
    "pylint.extensions.empty_comment",
    "pylint.extensions.emptystring",
    "pylint.extensions.eq_without_hash",
    "pylint.extensions.for_any_all",
    "pylint.extensions.magic_value",
    "pylint.extensions.no_self_use",
    "pylint.extensions.overlapping_exceptions",
    "pylint.extensions.private_import",
    "pylint.extensions.redefined_loop_name",
    "pylint.extensions.redefined_variable_type",
    "pylint.extensions.set_membership",
    "pylint.extensions.typing",
    "pylint.extensions.while_used",
]

[tool.pylint."MESSAGE CONTROL"]
disable = ["R", "C", "E", "F", "W", "I"]
enable = [
    "useless-suppression",
    # rules that have not yet been implemented in ruff. once all of these are implemented in ruff, we should remove pylint
    # (see https://github.com/astral-sh/ruff/issues/970):
    "access-member-before-definition",
    "assigning-non-slot",
    "assignment-from-no-return",
    "assignment-from-none",
    "bad-except-order",
    "bad-exception-cause",
    "bad-format-character",
    "bad-reversed-sequence",
    "bad-super-call",
    "catching-non-exception",
    "class-variable-slots-conflict",
    "dict-iter-missing-items",
    "inconsistent-mro",
    "init-is-generator",
    "invalid-bool-returned",
    "invalid-bytes-returned",
    "invalid-character-carriage-return",
    "invalid-class-object",
    "invalid-enum-extension",
    "invalid-envvar-value",
    "invalid-format-returned",
    "invalid-getnewargs-ex-returned",
    "invalid-getnewargs-returned",
    "invalid-index-returned",
    "invalid-length-hint-returned",
    "invalid-length-returned",
    "invalid-metaclass",
    "invalid-repr-returned",
    "invalid-sequence-index",
    "invalid-slice-index",
    "invalid-slice-step",
    "invalid-slots",
    "invalid-slots-object",
    "invalid-star-assignment-target",
    "invalid-str-returned",
    "invalid-unary-operand-type",
    "invalid-unicode-codec",
    "logging-format-truncated",
    "logging-unsupported-format",
    "method-hidden",
    "misplaced-bare-raise",
    "misplaced-format-function",
    "missing-kwoa",
    "modified-iterating-dict",
    "modified-iterating-set",
    "non-iterator-returned",
    "nonlocal-and-global",
    "not-a-mapping",
    "not-async-context-manager",
    "not-callable",
    "not-context-manager",
    "potential-index-error",
    "raising-non-exception",
    "redundant-keyword-arg",
    "relative-beyond-top-level",
    "repeated-keyword",
    "singledispatch-method",
    "singledispatchmethod-function",
    "star-needs-assignment-target",
    "unhashable-member",
    "unpacking-non-sequence",
    "unsupported-assignment-operation",
    "unsupported-binary-operation",
    "unsupported-delete-operation",
    "used-before-assignment",
    "abstract-method",
    "anomalous-unicode-escape-in-string",
    "arguments-out-of-order",
    "arguments-renamed",
    "attribute-defined-outside-init",
    "bad-builtin",
    "bad-indentation",
    "bad-open-mode",
    "bad-staticmethod-argument",
    "bad-thread-instantiation",
    "comparison-with-callable",
    "confusing-with-statement",
    "deprecated-argument",
    "deprecated-class",
    "deprecated-decorator",
    "deprecated-method",
    "deprecated-module",
    "differing-param-doc",
    "differing-type-doc",
    "global-at-module-level",
    "global-variable-undefined",
    "invalid-format-index",
    "invalid-overridden-method",
    "method-cache-max-size-none",
    "missing-any-param-doc",
    "missing-format-attribute",
    "missing-param-doc",
    "missing-parentheses-for-call-in-test",
    "missing-raises-doc",
    "missing-return-doc",
    "missing-return-type-doc",
    "missing-timeout",
    "missing-type-doc",
    "missing-yield-doc",
    "missing-yield-type-doc",
    "modified-iterating-list",
    "multiple-constructor-doc",
    "nan-comparison",
    "non-ascii-file-name",
    "non-parent-init-called",
    "non-str-assignment-to-dunder-name",
    "overlapping-except",
    "overridden-final-method",
    "preferred-module",
    "raising-format-tuple",
    "redeclared-assigned-name",
    "redefined-outer-name",
    "redefined-slots-in-subclass",
    "redundant-returns-doc",
    "redundant-u-string-prefix",
    "redundant-unittest-assert",
    "redundant-yields-doc",
    "reimported",
    "self-cls-assignment",
    "shallow-copy-environ",
    "signature-differs",
    "super-init-not-called",
    "super-without-brackets",
    "unbalanced-dict-unpacking",
    "unbalanced-tuple-unpacking",
    "undefined-loop-variable",
    "unnecessary-ellipsis",
    "unnecessary-lambda",
    "unreachable",
    "unused-private-member",
    "unused-wildcard-import",
    "useless-param-doc",
    "useless-parent-delegation",
    "useless-type-doc",
    "useless-with-lock",
    "using-constant-test",
    "using-final-decorator-in-unsupported-version",
    "while-used",
    "wrong-exception-operation",
    "bad-file-encoding",
    "bad-mcs-classmethod-argument",
    "bad-mcs-method-argument",
    "dict-init-mutate",
    "import-private-name",
    "invalid-characters-in-docstring",
    "mixed-line-endings",
    "non-ascii-module-import",
    "non-ascii-name",
    "unexpected-line-ending-format",
    "use-implicit-booleaness-not-comparison",
    "chained-comparison",
    "condition-evals-to-constant",
    "confusing-consecutive-elif",
    "consider-swap-variables",
    "consider-using-augmented-assign",
    "consider-using-from-import",
    "consider-using-join",
    "consider-using-max-builtin",
    "consider-using-min-builtin",
    "consider-using-namedtuple-or-dataclass",
    "consider-using-tuple",
    "empty-comment",
    "no-classmethod-decorator",
    "no-staticmethod-decorator",
    "redefined-variable-type",
    "simplifiable-condition",
    "simplify-boolean-expression",
    "stop-iteration-return",
    "unnecessary-dict-index-lookup",
    "unnecessary-list-index-lookup",
    "use-set-for-membership",
    "useless-return",
]

[tool.pylint.REPORTS]
reports = "no"
output-format = "colorized"
score = "no"

[tool.pylint.FORMAT]
max-line-length = 200

[tool.pytest.ini_options]
addopts = ['-p no:robotframework', '--ignore=tests/fixtures']
xfail_strict = true

[tool.mypy]
allow_redefinition = true
default_return = false

[[tool.mypy.overrides]]
module = ['robot.*']
no_implicit_reexport = false
ignore_missing_py_typed = true # https://github.com/robotframework/robotframework/issues/4822
[[tool.mypy.overrides]]

module = ['deepmerge.*']
ignore_missing_py_typed = true

[[tool.mypy.overrides]]
module = ['pytest_robotframework.*', 'tests.*']
default_return = true

[tool.ruff]
extend-select = [
    "I",
    "UP",
    "PYI",
    "PL",
    "B",
    "PGH",
    "T10",
    "G",
    "A",
    "ERA",
    "ARG",
    "SIM",
    "RET",
    "N",
    "RUF",
    "S",
    "ISC",
    "TRY",
    "D",
    "PT",
    "YTT",
    "ASYNC",
    "BLE",
    "FBT",
    "C4",
    "DTZ",
    "T10",
    "FA",
    "INP",
    "PIE",
    "G",
    "T20",
    "RSE",
    "RET",
    "SLF",
    "TID",
    "TCH",
    "PTH",
    "TD",
    "PD",
    "FLY",
    "NPY",
    "AIR",
    "PERF",
    # nursery rules:
    # https://github.com/astral-sh/ruff/issues/6910
    "E111",
    "E113",
    "E114",
    "E115",
    "E116",
    "E117",
    "E201",
    "E202",
    "E203",
    "E211",
    "E221",
    "E222",
    "E223",
    "E224",
    "E225",
    "E226",
    "E227",
    "E228",
    "E231",
    "E241",
    "E242",
    "E251",
    "E252",
    "E261",
    "E262",
    "E265",
    "E266",
    "E271",
    "E272",
    "E273",
    "E274",
    "E275",
    "PLC1901",
    "PLR6301",
    "PLW1641",
    "PLW3201",
    "RUF017",
]
ignore = [
    "PLR0913", # Too many arguments to function call
    "PLR0912", # Too many branches
    "PLR0915", # Too many statements
    "PLR2004", # Magic value used in comparison
    "PLR1722", # Use `sys.exit()` instead of `exit`
    "PLW2901", # `for` loop variable overwritten by assignment target
    "PLE0605", # Invalid format for `__all__`, must be `tuple` or `list` (covered by mypy)
    "PLR0911", # Too many return statements
    "PLW0603", # Using the global statement is discouraged
    "PLC0105", # `TypeVar` name does not reflect its covariance
    "PLC0414", # Import alias does not rename original package (used by mypy for explicit re-export)
    "RUF013",  # PEP 484 prohibits implicit Optional (covered by mypy)
    "RUF016",  # Slice in indexed access to type (covered by mypy)
    "TRY002",  # Create your own exception
    "TRY003",  # Avoid specifying long messages outside the exception class
    "D10",     # Missing docstring
    "D203",    # 1 blank line required before class docstring
    "D204",    # 1 blank line required after class docstring (handled by black)
    "D205",    # 1 blank line required between summary line and description
    "D209",    # Multi-line docstring closing quotes should be on a separate line
    "D210",    # No whitespaces allowed surrounding docstring text (conflicts with black when docstring ends with quote (eg. """this is a "quote" """))
    "D212",    # Multi-line docstring summary should start at the first line
    "D213",    # Multi-line docstring summary should start at the second line
    "D400",    # First line should end with a period
    "D401",    # First line should be in imperative mood
    "D403",    # First word of the first line should be properly capitalized
    "D404",    # First word of the docstring should not be `This`
    "D405",    # Section name should be properly capitalized
    "D406",    # Section name should end with a newline
    "D415",    # First line should end with a period, question mark, or exclamation point
    "D418",    # Function/Method decorated with @overload shouldn't contain a docstring (vscode supports it)
    "PT013",   # Found incorrect import of pytest, use simple import pytest instead (only for bad linters that can't check the qualname)
    "TD002",   # Missing author in TODO
    "PGH003",  # Use specific rule codes when ignoring type issues (covered by mypy)
]
target-version = "py311"
respect-gitignore = true
line-length = 100

[tool.ruff.pycodestyle]
ignore-overlong-task-comments = true

[tool.ruff.flake8-pytest-style]
fixture-parentheses = false

[tool.ruff.per-file-ignores]
"*.pyi" = ["A001", "A002", "N"] # we don't control names in 3rd party modules
"tests/*" = ["S101"]            # pytest uses assert statements

[tool.ruff.isort]
combine-as-imports = true
required-imports = ["from __future__ import annotations"]

[tool.robotidy]
configure = [
    "AlignTemplatedTestCases:enabled=True",
    "RenameKeywords:enabled=True",
    "RenameTestCases:enabled=True",
    "SplitTooLongLine:line_length=160",
]


[tool.robocop]
paths = ["tests"]
reports = ["all"]
exclude = [
    "not-allowed-char-in-filename",
    "non-local-variables-should-be-uppercase",
    "section-variable-not-uppercase",
    "too-many-calls-in-test-case",
    "too-many-calls-in-keyword",
    "too-long-test-case",
    "too-many-arguments",
    "not-capitalized-test-case-title",
    "file-too-long",
    "too-long-keyword",
    "missing-doc-resource-file",
    "missing-doc-keyword",
    "missing-doc-suite",
    "missing-doc-test-case",
]
configure = [
    "todo-in-comment:enabled:False",
    "too-many-test-cases:enabled:False",
    "too-many-calls-in-keyword:severity:W",
    "can-be-resource-file:severity:W",
    "missing-doc-suite:severity:W",
    "line-too-long:line_length:160",
    "possible-variable-overwriting:severity:E",
    "could-be-test-tags:severity:E",
    "tag-already-set-in-test-tags:severity:E",
    "unused-variable:severity:W",
    "unnecessary-string-conversion:severity:W",
    "expression-can-be-simplified:severity:W",
    "can-be-resource-file:severity:W",
]
