[tool.poetry]
authors = ["DetachHead <detachhead@users.noreply.github.com>"]
description = ""
name = "pytest_robotframework"
version = "0.1.0"

[tool.poetry.dependencies]
python = "^3.11"
robotframework = "^6.1.1"

[tool.poetry.dev-dependencies]
black = "^23"
basedmypy = "^2"
pylint = "^2.15"
pytest = "^7"
ruff = "~0.0.280"

[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core>=1.1.0b2"]

[tool.poetry.plugins.pytest11]
robotframework = "pytest_robotframework.pytest_robotframework"

[tool.isort]
profile = "black"
multi_line_output = 3
combine_as_imports = true

[tool.black]
target-version = ["py311"]
skip-magic-trailing-comma = true

[tool.pylint.MASTER]
ignore-patterns = '.*\.pyi'
fail-on = "I"
bad-names = ["foo", "bar", "baz", "retval"]


[tool.pylint."MESSAGE CONTROL"]
disable = ["R", "C", "E", "F", "W", "I"]
enable = [
    "useless-suppression",
    "unidiomatic-typecheck", # https://github.com/astral-sh/ruff/issues/6260
    # rules that have not yet been implemented in ruff. once all of these are implemented in ruff, we should remove pylint
    # (see https://github.com/astral-sh/ruff/issues/970):
    "abstract-class-instantiated",
    "access-member-before-definition",
    "assigning-non-slot",
    "assignment-from-no-return",
    "assignment-from-none",
    "bad-except-order",
    "bad-exception-cause",
    "bad-format-character",
    "bad-reversed-sequence",
    "bad-super-call",
    "catching-non-exception",
    "class-variable-slots-conflict",
    "dict-iter-missing-items",
    "inconsistent-mro",
    "inherit-non-class",
    "init-is-generator",
    "invalid-bool-returned",
    "invalid-bytes-returned",
    "invalid-character-carriage-return",
    "invalid-class-object",
    "invalid-enum-extension",
    "invalid-envvar-value",
    "invalid-format-returned",
    "invalid-getnewargs-ex-returned",
    "invalid-getnewargs-returned",
    "invalid-hash-returned",
    "invalid-index-returned",
    "invalid-length-hint-returned",
    "invalid-length-returned",
    "invalid-metaclass",
    "invalid-repr-returned",
    "invalid-sequence-index",
    "invalid-slice-index",
    "invalid-slice-step",
    "invalid-slots",
    "invalid-slots-object",
    "invalid-star-assignment-target",
    "invalid-str-returned",
    "invalid-unary-operand-type",
    "invalid-unicode-codec",
    "logging-format-truncated",
    "logging-unsupported-format",
    "method-hidden",
    "misplaced-bare-raise",
    "misplaced-format-function",
    "missing-kwoa",
    "modified-iterating-dict",
    "modified-iterating-set",
    "no-name-in-module",
    "non-iterator-returned",
    "nonlocal-and-global",
    "not-a-mapping",
    "not-async-context-manager",
    "not-callable",
    "not-context-manager",
    "potential-index-error",
    "raising-non-exception",
    "redundant-keyword-arg",
    "relative-beyond-top-level",
    "repeated-keyword",
    "singledispatch-method",
    "singledispatchmethod-function",
    "star-needs-assignment-target",
    "unhashable-member",
    "unpacking-non-sequence",
    "unsupported-assignment-operation",
    "unsupported-binary-operation",
    "unsupported-delete-operation",
    "unsupported-membership-test",
    "used-before-assignment",
    "abstract-method",
    "anomalous-unicode-escape-in-string",
    "arguments-differ",
    "arguments-out-of-order",
    "arguments-renamed",
    "attribute-defined-outside-init",
    "bad-builtin",
    "bad-dunder-name",
    "bad-indentation",
    "bad-open-mode",
    "bad-staticmethod-argument",
    "bad-thread-instantiation",
    "comparison-with-callable",
    "confusing-with-statement",
    "deprecated-argument",
    "deprecated-class",
    "deprecated-decorator",
    "deprecated-method",
    "deprecated-module",
    "deprecated-typing-alias",
    "differing-param-doc",
    "differing-type-doc",
    "global-at-module-level",
    "global-variable-undefined",
    "invalid-format-index",
    "invalid-overridden-method",
    "isinstance-second-argument-not-valid-type",
    "method-cache-max-size-none",
    "missing-any-param-doc",
    "missing-format-attribute",
    "missing-param-doc",
    "missing-parentheses-for-call-in-test",
    "missing-raises-doc",
    "missing-return-doc",
    "missing-return-type-doc",
    "missing-timeout",
    "missing-type-doc",
    "missing-yield-doc",
    "missing-yield-type-doc",
    "modified-iterating-list",
    "multiple-constructor-doc",
    "nan-comparison",
    "non-ascii-file-name",
    "non-parent-init-called",
    "non-str-assignment-to-dunder-name",
    "overlapping-except",
    "overridden-final-method",
    "preferred-module",
    "raising-format-tuple",
    "redeclared-assigned-name",
    "redefined-outer-name",
    "redefined-slots-in-subclass",
    "redundant-returns-doc",
    "redundant-u-string-prefix",
    "redundant-unittest-assert",
    "redundant-yields-doc",
    "reimported",
    "self-cls-assignment",
    "shallow-copy-environ",
    "signature-differs",
    "subclassed-final-class",
    "subprocess-run-check",
    "super-init-not-called",
    "super-without-brackets",
    "unbalanced-dict-unpacking",
    "unbalanced-tuple-unpacking",
    "undefined-loop-variable",
    "unnecessary-ellipsis",
    "unnecessary-lambda",
    "unnecessary-pass",
    "unreachable",
    "unused-private-member",
    "unused-wildcard-import",
    "useless-param-doc",
    "useless-parent-delegation",
    "useless-type-doc",
    "useless-with-lock",
    "using-constant-test",
    "using-final-decorator-in-unsupported-version",
    "while-used",
    "wrong-exception-operation",
    "bad-file-encoding",
    "bad-mcs-classmethod-argument",
    "bad-mcs-method-argument",
    "compare-to-zero",
    "dict-init-mutate",
    "disallowed-name",
    "import-private-name",
    "invalid-characters-in-docstring",
    "mixed-line-endings",
    "non-ascii-module-import",
    "non-ascii-name",
    "unexpected-line-ending-format",
    "use-implicit-booleaness-not-comparison",
    "wrong-spelling-in-comment",
    "wrong-spelling-in-docstring",
    "chained-comparison",
    "condition-evals-to-constant",
    "confusing-consecutive-elif",
    "consider-swap-variables",
    "consider-using-assignment-expr",
    "consider-using-augmented-assign",
    "consider-using-from-import",
    "consider-using-join",
    "consider-using-max-builtin",
    "consider-using-min-builtin",
    "consider-using-namedtuple-or-dataclass",
    "consider-using-tuple",
    "empty-comment",
    "no-classmethod-decorator",
    "no-self-use",
    "no-staticmethod-decorator",
    "redefined-variable-type",
    "simplifiable-condition",
    "simplify-boolean-expression",
    "stop-iteration-return",
    "unnecessary-dict-index-lookup",
    "unnecessary-list-index-lookup",
    "use-set-for-membership",
    "useless-return",
]

[tool.pylint.REPORTS]
reports = "no"
output-format = "colorized"
score = "no"

[tool.pylint.FORMAT]
max-line-length = 200

[tool.pytest.ini_options]
xfail_strict = true

[tool.mypy]
allow_redefinition = true
default_return = true
ignore_missing_py_typed = true # https://github.com/robotframework/robotframework/issues/4822

[tool.ruff]
extend-select = [
    "I",
    "UP",
    "PYI",
    "PL",
    "B",
    "PGH",
    "T10",
    "G",
    "A",
    "ERA",
    "ARG",
    "SIM",
    "RET",
    "N",
    "RUF",
    "S",
    "ISC",
    "TRY",
]
ignore = [
    "E501",    # Doc line too long
    "E721",    # unidiomatic typecheck (using pylint's one for now due to https://github.com/astral-sh/ruff/issues/6260)
    "PLR0913", # Too many arguments to function call
    "PLR0912", # Too many branches
    "PLR0915", # Too many statements
    "PLR2004", # Magic value used in comparison
    "PLR1722", # Use `sys.exit()` instead of `exit`
    "PLW2901", # `for` loop variable overwritten by assignment target
    "PLE0605", # Invalid format for `__all__`, must be `tuple` or `list` (covered by mypy)
    "PLR0911", # Too many return statements
    "PLW0603", # Using the global statement is discouraged
    "PLC0105", # `TypeVar` name does not reflect its covariance
    "PLC0414", # Import alias does not rename original package (used by mypy for explicit re-export)
    "RUF013",  # PEP 484 prohibits implicit Optional (covered by mypy)
    "RUF016",  # Slice in indexed access to type (covered by mypy)
    "TRY002",  # Create your own exception
    "TRY003",  # Avoid specifying long messages outside the exception class
]
target-version = "py311"
respect-gitignore = true

[tool.ruff.per-file-ignores]
"*.pyi" = ["A001", "A002", "N"] # we don't control names in 3rd party modules

[tool.ruff.isort]
combine-as-imports = true
