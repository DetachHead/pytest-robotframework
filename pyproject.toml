[project]
name = "pytest_robotframework"
version = "3.2.1"
description = "a pytest plugin that can run both python and robotframework tests while generating robot reports for them"
authors = [
    { name = "DetachHead", email = "detachhead@users.noreply.github.com" },
]
dependencies = [
    "pytest<9,>=7",
    "robotframework<8.0.0,>=6.1",
    "basedtyping<0.2,>=0.1.0",
    "ansi2html>=1.9.1",
]
requires-python = ">=3.8,<4.0"
readme = "README.md"
license = { text = "MIT" }

[project.urls]
repository = "https://github.com/detachhead/pytest-robotframework"

[project.entry-points.pytest11]
robotframework = "pytest_robotframework._internal.pytest.plugin"

[tool.pyprojectx]
pdm = "pdm==2.12.3"

[tool.pyprojectx.aliases]
install = "pdm sync --clean"
run = "pdm run"
outdated = "pdm update --outdated"
test = "pdm run pytest -n auto"


[tool.pdm.dev-dependencies]
lint = [
    "basedpyright>=1.3.0",
    "pylint>=3.0.0a7",
    "ruff>=0.2.0",
    "robotframework-robocop>=4.1.0",
    "robotframework-tidy>=4.5.0",
]
test = ["lxml>=4.9.3", "lxml-stubs>=0.4.0", "pytest-xdist>=3.5.0"]
docs = ["pdoc>=14.1.0"]

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"


[tool.ruff.format]
skip-magic-trailing-comma = true

[tool.pylint.MASTER]
fail-on = "I"
bad-names = ["foo", "bar", "baz", "retval"]
load-plugins = [
    # we don't use all of these but enabling them all for completeness since there's no error if a rule is not found
    "pylint.extensions.bad_builtin",
    "pylint.extensions.broad_try_caluse",
    "pylint.extensions.check_elif",
    "pylint.extensions.code_style",
    "pylint.extensions.comparetozero",
    "pylint.extensions.comparison_placement",
    "pylint.extensions.confusing_elif",
    "pylint.extensions.consider_refactoring_into_while_condition",
    "pylint.extensions.consider_ternary_expression",
    "pylint.extensions.dict_init_mutate",
    "pylint.extensions.docparams",
    "pylint.extensions.docstyle",
    "pylint.extensions.dunder",
    "pylint.extensions.empty_comment",
    "pylint.extensions.emptystring",
    "pylint.extensions.eq_without_hash",
    "pylint.extensions.for_any_all",
    "pylint.extensions.magic_value",
    "pylint.extensions.no_self_use",
    "pylint.extensions.overlapping_exceptions",
    "pylint.extensions.private_import",
    "pylint.extensions.redefined_loop_name",
    "pylint.extensions.redefined_variable_type",
    "pylint.extensions.set_membership",
    "pylint.extensions.typing",
    "pylint.extensions.while_used",
]

[tool.pylint."MESSAGE CONTROL"]
disable = ["R", "C", "E", "F", "W", "I"]
enable = [
    "useless-suppression",
    # rules that have not yet been implemented in ruff. once all of these are implemented in ruff, we should remove pylint
    # (see https://github.com/astral-sh/ruff/issues/970):
    "possibly-unused-variable",
    "access-member-before-definition",
    "assignment-from-none",
    "bad-except-order",
    "bad-exception-cause",
    "bad-reversed-sequence",
    "bad-super-call",
    "catching-non-exception",
    "class-variable-slots-conflict",
    "dict-iter-missing-items",
    "inconsistent-mro",
    "init-is-generator",
    "invalid-bool-returned",
    "invalid-bytes-returned",
    "invalid-character-carriage-return",
    "invalid-class-object",
    "invalid-enum-extension",
    "invalid-envvar-value",
    "invalid-format-returned",
    "invalid-getnewargs-ex-returned",
    "invalid-getnewargs-returned",
    "invalid-index-returned",
    "invalid-length-hint-returned",
    "invalid-length-returned",
    "invalid-metaclass",
    "invalid-repr-returned",
    "invalid-sequence-index",
    "invalid-slice-index",
    "invalid-slice-step",
    "invalid-slots",
    "invalid-slots-object",
    "invalid-star-assignment-target",
    "invalid-str-returned",
    "invalid-unary-operand-type",
    "invalid-unicode-codec",
    "logging-format-truncated",
    "logging-unsupported-format",
    "method-hidden",
    "misplaced-format-function",
    "modified-iterating-dict",
    "modified-iterating-set",
    "non-iterator-returned",
    "nonlocal-and-global",
    "not-a-mapping",
    "not-async-context-manager",
    "not-callable",
    "not-context-manager",
    "raising-non-exception",
    "redundant-keyword-arg",
    "relative-beyond-top-level",
    "singledispatch-method",
    "singledispatchmethod-function",
    "star-needs-assignment-target",
    "unhashable-member",
    "unpacking-non-sequence",
    "unsupported-assignment-operation",
    "unsupported-binary-operation",
    "unsupported-delete-operation",
    "abstract-method",
    "anomalous-unicode-escape-in-string",
    "arguments-out-of-order",
    "arguments-renamed",
    "attribute-defined-outside-init",
    "bad-builtin",
    "bad-indentation",
    "bad-staticmethod-argument",
    "bad-thread-instantiation",
    "comparison-with-callable",
    "confusing-with-statement",
    "cyclic-import",
    "deprecated-argument",
    "deprecated-class",
    "deprecated-decorator",
    "deprecated-method",
    "deprecated-module",
    "differing-param-doc",
    "differing-type-doc",
    "global-variable-undefined",
    "invalid-format-index",
    "invalid-overridden-method",
    "method-cache-max-size-none",
    "missing-any-param-doc",
    "missing-format-attribute",
    "missing-param-doc",
    "missing-parentheses-for-call-in-test",
    "missing-raises-doc",
    "missing-return-doc",
    "missing-return-type-doc",
    "missing-timeout",
    "missing-yield-doc",
    "missing-yield-type-doc",
    "modified-iterating-list",
    "multiple-constructor-doc",
    "nan-comparison",
    "non-ascii-file-name",
    "non-parent-init-called",
    "non-str-assignment-to-dunder-name",
    "overlapping-except",
    "overridden-final-method",
    "preferred-module",
    "raising-format-tuple",
    "redeclared-assigned-name",
    "redefined-outer-name",
    "redefined-slots-in-subclass",
    "redundant-returns-doc",
    "redundant-unittest-assert",
    "redundant-yields-doc",
    "self-cls-assignment",
    "shallow-copy-environ",
    "signature-differs",
    "super-init-not-called",
    "unbalanced-dict-unpacking",
    "unbalanced-tuple-unpacking",
    "undefined-loop-variable",
    "unnecessary-ellipsis",
    "unreachable",
    "unused-private-member",
    "unused-wildcard-import",
    "useless-param-doc",
    "useless-parent-delegation",
    "useless-type-doc",
    "using-constant-test",
    "using-final-decorator-in-unsupported-version",
    "wrong-exception-operation",
    "bad-file-encoding",
    "bad-mcs-classmethod-argument",
    "bad-mcs-method-argument",
    "dict-init-mutate",
    "invalid-characters-in-docstring",
    "mixed-line-endings",
    "superfluous-parens",
    "unexpected-line-ending-format",
    "use-implicit-booleaness-not-comparison",
    "chained-comparison",
    "condition-evals-to-constant",
    "confusing-consecutive-elif",
    "consider-swap-variables",
    "consider-using-augmented-assign",
    "consider-using-join",
    "consider-using-max-builtin",
    "consider-using-min-builtin",
    "consider-using-namedtuple-or-dataclass",
    "consider-using-tuple",
    "simplifiable-condition",
    "simplify-boolean-expression",
    "stop-iteration-return",
    "use-set-for-membership",
    "useless-return",
]

[tool.pylint.REPORTS]
reports = "no"
output-format = "colorized"
score = "no"

[tool.pylint.FORMAT]
max-line-length = 200

[tool.pytest.ini_options]
addopts = ['-p', 'no:robotframework', '--ignore=tests/fixtures', '-vv']
xfail_strict = true
enable_assertion_pass_hook = true

[tool.basedpyright]
ignore = ["pw"]
pythonVersion = "3.8"
pythonPlatform = "All"
typeCheckingMode = "all"
reportMissingTypeStubs = false           # https://github.com/robotframework/robotframework/issues/4822
reportImplicitStringConcatenation = true # ideally this should be off and handled by the ruff formatter https://github.com/astral-sh/ruff/issues/9965
enableTypeIgnoreComments = false         # https://github.com/DetachHead/basedpyright/issues/55
reportUnusedImport = false               # covered by ruff (which has a quickfix)

[tool.ruff]
unsafe-fixes = true
target-version = "py38"
respect-gitignore = true
line-length = 100
preview = true
extend-exclude = ["pw"]

[tool.ruff.lint]
extend-select = ["ALL"]
ignore = [
    "ANN",     # flake8-annotations (covered by pyright)
    "EM",      # flake8-errmsg
    "FIX",     # flake8-fixme
    "PLR0913", # Too many arguments to function call
    "PLR0912", # Too many branches
    "PLR0915", # Too many statements
    "PLR2004", # Magic value used in comparison
    "PLR1722", # Use `sys.exit()` instead of `exit`
    "PLW2901", # `for` loop variable overwritten by assignment target
    "PLE0605", # Invalid format for `__all__`, must be `tuple` or `list` (covered by pyright)
    "PLR0911", # Too many return statements
    "PLW0603", # Using the global statement is discouraged
    "PLC0105", # `TypeVar` name does not reflect its covariance
    "PLC0414", # Import alias does not rename original package (used by pyright for explicit re-export)
    "RUF013",  # PEP 484 prohibits implicit Optional (covered by pyright)
    "RUF016",  # Slice in indexed access to type (covered by pyright)
    "TRY002",  # Create your own exception
    "TRY003",  # Avoid specifying long messages outside the exception class
    "D10",     # Missing docstring
    "D203",    # 1 blank line required before class docstring
    "D205",    # 1 blank line required between summary line and description
    "D209",    # Multi-line docstring closing quotes should be on a separate line
    "D212",    # Multi-line docstring summary should start at the first line
    "D213",    # Multi-line docstring summary should start at the second line
    "D400",    # First line should end with a period
    "D401",    # First line should be in imperative mood
    "D403",    # First word of the first line should be properly capitalized
    "D404",    # First word of the docstring should not be `This`
    "D405",    # Section name should be properly capitalized
    "D406",    # Section name should end with a newline
    "D415",    # First line should end with a period, question mark, or exclamation point
    "D418",    # Function/Method decorated with @overload shouldn't contain a docstring (vscode supports it)
    "D413",    # blank-line-after-last-section
    "PT013",   # Found incorrect import of pytest, use simple import pytest instead (only for bad linters that can't check the qualname)
    "TD002",   # Missing author in TODO
    "CPY001",  # missing-copyright-notice
    "C901",    # max-complexity
    "SLF001",  # private-member-access (covered by pyright)
    "PLC2701", # import-private-name (covered by pyright)
    "UP006",   # non-pep585-annotation (covered by pyright)
    "UP007",   # non-pep604-annotation (covered by pyright)
    "UP035",   # deprecated-import (covered by pyright)
    "ISC001",  # single-line-implicit-string-concatenation (conflicts with formatter)
    "COM812",  # missing-trailing-comma (conflicts with formatter)
    "ISC003",  # explicit-string-concatenation (https://github.com/astral-sh/ruff/issues/9965)
    "W293",    # modifies strings (https://github.com/astral-sh/ruff/issues/10038)
]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false

[tool.ruff.lint.per-file-ignores]
"*.pyi" = ["A001", "A002", "N"] # we don't control names in 3rd party modules
"tests/**/*.py" = [
    "S101", # Use of assert detected (pytest uses assert statements)
]
[tool.ruff.lint.isort]
combine-as-imports = true
required-imports = ["from __future__ import annotations"]
split-on-trailing-comma = false

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"contextlib.AbstractContextManager".msg = "Use `typing.ContextManager` instead because it works at runtime on python 3.8."

[tool.robotidy]
configure = [
    "AlignTemplatedTestCases:enabled=True",
    "RenameKeywords:enabled=True",
    "RenameTestCases:enabled=True",
    "SplitTooLongLine:line_length=160",
]


[tool.robocop]
paths = ["tests"]
reports = ["all"]
exclude = [
    "not-allowed-char-in-filename",
    "non-local-variables-should-be-uppercase",
    "section-variable-not-uppercase",
    "too-many-calls-in-test-case",
    "too-many-calls-in-keyword",
    "too-long-test-case",
    "too-many-arguments",
    "not-capitalized-test-case-title",
    "file-too-long",
    "too-long-keyword",
    "missing-doc-resource-file",
    "missing-doc-keyword",
    "missing-doc-suite",
    "missing-doc-test-case",
]
configure = [
    "todo-in-comment:enabled:False",
    "too-many-test-cases:enabled:False",
    "too-many-calls-in-keyword:severity:W",
    "can-be-resource-file:severity:W",
    "missing-doc-suite:severity:W",
    "line-too-long:line_length:160",
    "possible-variable-overwriting:severity:E",
    "could-be-test-tags:severity:E",
    "tag-already-set-in-test-tags:severity:E",
    "unused-variable:severity:W",
    "unnecessary-string-conversion:severity:W",
    "expression-can-be-simplified:severity:W",
    "can-be-resource-file:severity:W",
]
